docker-sign-in: &docker-sign-in
  name: login to doker remote
  command: |
    docker login \
      --username $DOCKER_USER \
      --password $DOCKER_PASS \
      https://docker-registry.bimdata.io

mapping-var-env: &mapping-var-env
  name: define var with branch
  command: |
    case "$CIRCLE_BRANCH" in
      "master") ENV=prod
        ;;
      "release") ENV=next
        ;;
      "develop") ENV=staging
        ;;
      *) ENV=dev_$(echo "$CIRCLE_BRANCH" | iconv -t ascii//TRANSLIT | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)
        ;;
    esac
    echo 'export ENV='$ENV >> $BASH_ENV

version: 2.1

references:
  container_config: &container_config
    docker:
      - image: circleci/python:3.9
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_PASSWORD: "platform_back"
          POSTGRES_DB: "platform_back"
          POSTGRES_USER: "platform_back"
    working_directory: ~/repo

jobs:
  test:
    <<: *container_config
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
      - run:
          name: install dependencies
          command: poetry install
      - run:
          name: run migrations test
          command: poetry run python manage.py migrate
      - run:
          name: run tests
          command: poetry run python manage.py test
      - save_cache:
          paths:
            - ~/.local
            - ~/.cache
          key: v1-dependencies-{{ checksum "poetry.lock" }}

  build_and_push:
    docker:
      - image: circleci/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - add_ssh_keys
      - run: *mapping-var-env
      - run: *docker-sign-in
      - run:
          name: backup previous image
          command: |
            if export DOCKER_CLI_EXPERIMENTAL=enabled && docker manifest inspect "docker-registry.bimdata.io/bimdata/platform_back:prev-$ENV" > /dev/null; then
              docker pull "docker-registry.bimdata.io/bimdata/platform_back:$ENV"
              docker image tag "docker-registry.bimdata.io/bimdata/platform_back:$ENV" "docker-registry.bimdata.io/bimdata/platform_back:prev-$ENV"
              docker push "docker-registry.bimdata.io/bimdata/platform_back:prev-$ENV"
            fi
      - run:
          name: build docker image
          command: |
            echo $CIRCLE_SHA1 > VERSION
            docker build --tag "docker-registry.bimdata.io/bimdata/platform_back:$ENV" .
      - run:
          name: push new image
          command: docker push "docker-registry.bimdata.io/bimdata/platform_back:$ENV"
      - run:
          name: push latest tag image
          command: |
            if [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              docker tag "docker-registry.bimdata.io/bimdata/platform_back:$ENV" docker-registry.bimdata.io/bimdata/platform_back:latest
              docker push docker-registry.bimdata.io/bimdata/platform_back:latest
            fi

  deploy:
    docker:
      - image: circleci/python:3.9
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - run: *docker-sign-in
      - run: *mapping-var-env
      - run:
          name: ansible deployment
          command: |
            docker run -e ANSIBLE_VAULT_PASSWD docker-registry.bimdata.io/bimdata/deployment:latest \
              ansible-playbook \
              --inventory-file inventories/$ENV \
              --tags platform_back \
              --extra-vars "ansible_ssh_private_key_file=./files/deploy_rsa" \
              --user deploy  \
              deploy.yml

workflows:
  test_and_deploy:
    jobs:
      - test
      - build_and_push:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - release
                - develop
      - deploy:
          requires:
            - build_and_push
